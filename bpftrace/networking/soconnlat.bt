#!/usr/local/bin/bpftrace
/*
 * soconnlat - Summarize IP socket connection latency with stacks.
 *
 * See BPF Performance Tools, Chapter 10, for an explanation of this tool.
 *
 * Copyright (c) 2019 Brendan Gregg.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * This was originally created for the BPF Performance Tools book
 * published by Addison Wesley. ISBN-13: 9780136554820
 * When copying or porting, include this comment.
 *
 * 12-Apr-2019  Brendan Gregg   Created this.
 */

#include <asm-generic/errno.h>
#include <linux/in.h>

BEGIN
{
	printf("Tracing IP connect() latency with ustacks. Ctrl-C to end.\n");
}

tracepoint:syscalls:sys_enter_connect
/args->uservaddr->sa_family == AF_INET ||
    args->uservaddr->sa_family == AF_INET6/
{
	@conn_start[tid] = nsecs;
	@conn_stack[tid] = ustack();
}

tracepoint:syscalls:sys_exit_connect
/@conn_start[tid] && args->ret != - EINPROGRESS/
{
	$dur_us = (nsecs - @conn_start[tid]) / 1000;
	@us[@conn_stack[tid], comm] = hist($dur_us);
	delete(@conn_start[tid]);
	delete(@conn_stack[tid]);
}

tracepoint:syscalls:sys_exit_poll*,
tracepoint:syscalls:sys_exit_epoll*,
tracepoint:syscalls:sys_exit_select*,
tracepoint:syscalls:sys_exit_pselect*
/@conn_start[tid] && args->ret > 0/
{
	$dur_us = (nsecs - @conn_start[tid]) / 1000;
	@us[@conn_stack[tid], comm] = hist($dur_us);
	delete(@conn_start[tid]);
	delete(@conn_stack[tid]);
}

END
{
	clear(@conn_start); clear(@conn_stack);
}
